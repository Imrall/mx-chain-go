// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

package consensus

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Message defines the data needed by spos to communicate between nodes over network in all subrounds
type Message struct {
	BlockHeaderHash      []byte   `protobuf:"bytes,1,opt,name=BlockHeaderHash,proto3" json:"BlockHeaderHash,omitempty"`
	SignatureShare       []byte   `protobuf:"bytes,2,opt,name=SignatureShare,proto3" json:"SignatureShare,omitempty"`
	Body                 []byte   `protobuf:"bytes,3,opt,name=Body,proto3" json:"Body,omitempty"`
	Header               []byte   `protobuf:"bytes,4,opt,name=Header,proto3" json:"Header,omitempty"`
	PubKey               []byte   `protobuf:"bytes,5,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	Signature            []byte   `protobuf:"bytes,6,opt,name=Signature,proto3" json:"Signature,omitempty"`
	MsgType              int64    `protobuf:"varint,7,opt,name=MsgType,proto3" json:"MsgType,omitempty"`
	RoundIndex           int64    `protobuf:"varint,8,opt,name=RoundIndex,proto3" json:"RoundIndex,omitempty"`
	ChainID              []byte   `protobuf:"bytes,9,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	PubKeysBitmap        []byte   `protobuf:"bytes,10,opt,name=PubKeysBitmap,proto3" json:"PubKeysBitmap,omitempty"`
	AggregateSignature   []byte   `protobuf:"bytes,11,opt,name=AggregateSignature,proto3" json:"AggregateSignature,omitempty"`
	LeaderSignature      []byte   `protobuf:"bytes,12,opt,name=LeaderSignature,proto3" json:"LeaderSignature,omitempty"`
	OriginatorPid        []byte   `protobuf:"bytes,13,opt,name=OriginatorPid,proto3" json:"OriginatorPid,omitempty"`
	InvalidSigners       []byte   `protobuf:"bytes,14,opt,name=InvalidSigners,proto3" json:"InvalidSigners,omitempty"`
	NumInvalidSigners    int64    `protobuf:"varint,15,opt,name=NumInvalidSigners,proto3" json:"NumInvalidSigners,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetBlockHeaderHash() []byte {
	if m != nil {
		return m.BlockHeaderHash
	}
	return nil
}

func (m *Message) GetSignatureShare() []byte {
	if m != nil {
		return m.SignatureShare
	}
	return nil
}

func (m *Message) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Message) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Message) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Message) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Message) GetMsgType() int64 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *Message) GetRoundIndex() int64 {
	if m != nil {
		return m.RoundIndex
	}
	return 0
}

func (m *Message) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *Message) GetPubKeysBitmap() []byte {
	if m != nil {
		return m.PubKeysBitmap
	}
	return nil
}

func (m *Message) GetAggregateSignature() []byte {
	if m != nil {
		return m.AggregateSignature
	}
	return nil
}

func (m *Message) GetLeaderSignature() []byte {
	if m != nil {
		return m.LeaderSignature
	}
	return nil
}

func (m *Message) GetOriginatorPid() []byte {
	if m != nil {
		return m.OriginatorPid
	}
	return nil
}

func (m *Message) GetInvalidSigners() []byte {
	if m != nil {
		return m.InvalidSigners
	}
	return nil
}

func (m *Message) GetNumInvalidSigners() int64 {
	if m != nil {
		return m.NumInvalidSigners
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "proto.Message")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcb, 0x4e, 0xf3, 0x30,
	0x10, 0x85, 0x95, 0xbf, 0xb7, 0xbf, 0x43, 0x2f, 0xc2, 0x0b, 0x64, 0x21, 0x54, 0x55, 0x08, 0xa1,
	0x2e, 0xa0, 0x5d, 0xf0, 0x04, 0x04, 0x16, 0xad, 0xa0, 0x50, 0xb5, 0xac, 0xd8, 0x39, 0x8d, 0x71,
	0x2c, 0x1a, 0xbb, 0xb2, 0x63, 0x44, 0x1f, 0x82, 0xf7, 0x63, 0xcd, 0x93, 0xa0, 0x8c, 0x29, 0x25,
	0x81, 0x55, 0x7c, 0xbe, 0x33, 0x73, 0x26, 0x19, 0x07, 0xda, 0x29, 0xb7, 0x96, 0x09, 0x3e, 0x5c,
	0x1b, 0x9d, 0x69, 0x52, 0xc3, 0xc7, 0xe1, 0xb9, 0x90, 0x59, 0xe2, 0xa2, 0xe1, 0x52, 0xa7, 0x23,
	0xa1, 0x85, 0x1e, 0x21, 0x8e, 0xdc, 0x13, 0x2a, 0x14, 0x78, 0xf2, 0x5d, 0xc7, 0x6f, 0x55, 0x68,
	0x4c, 0x7d, 0x0e, 0x19, 0x40, 0x37, 0x5c, 0xe9, 0xe5, 0xf3, 0x98, 0xb3, 0x98, 0x9b, 0x31, 0xb3,
	0x09, 0x0d, 0xfa, 0xc1, 0xa0, 0x35, 0x2f, 0x63, 0x72, 0x0a, 0x9d, 0x85, 0x14, 0x8a, 0x65, 0xce,
	0xf0, 0x45, 0xc2, 0x0c, 0xa7, 0xff, 0xb0, 0xb0, 0x44, 0x09, 0x81, 0x6a, 0xa8, 0xe3, 0x0d, 0xad,
	0xa0, 0x8b, 0x67, 0x72, 0x00, 0x75, 0x9f, 0x44, 0xab, 0x48, 0xbf, 0x54, 0xce, 0x67, 0x2e, 0xba,
	0xe1, 0x1b, 0x5a, 0xf3, 0xdc, 0x2b, 0x72, 0x04, 0xcd, 0xef, 0x54, 0x5a, 0x47, 0x6b, 0x07, 0x08,
	0x85, 0xc6, 0xd4, 0x8a, 0x87, 0xcd, 0x9a, 0xd3, 0x46, 0x3f, 0x18, 0x54, 0xe6, 0x5b, 0x49, 0x7a,
	0x00, 0x73, 0xed, 0x54, 0x3c, 0x51, 0x31, 0x7f, 0xa5, 0xff, 0xd1, 0xfc, 0x41, 0xf2, 0xce, 0xab,
	0x84, 0x49, 0x35, 0xb9, 0xa6, 0x4d, 0x4c, 0xdd, 0x4a, 0x72, 0x02, 0x6d, 0x3f, 0xdb, 0x86, 0x32,
	0x4b, 0xd9, 0x9a, 0x02, 0xfa, 0x45, 0x48, 0x86, 0x40, 0x2e, 0x85, 0x30, 0x5c, 0xb0, 0x8c, 0xef,
	0x5e, 0x70, 0x0f, 0x4b, 0xff, 0x70, 0xf2, 0xed, 0xde, 0xe2, 0x97, 0xee, 0x8a, 0x5b, 0x7e, 0xbb,
	0x25, 0x9c, 0xcf, 0xbf, 0x37, 0x52, 0x48, 0xc5, 0x32, 0x6d, 0x66, 0x32, 0xa6, 0x6d, 0x3f, 0xbf,
	0x00, 0xf3, 0x3b, 0x98, 0xa8, 0x17, 0xb6, 0x92, 0x71, 0xde, 0xc9, 0x8d, 0xa5, 0x1d, 0x7f, 0x07,
	0x45, 0x4a, 0xce, 0x60, 0xff, 0xce, 0xa5, 0xa5, 0xd2, 0x2e, 0xae, 0xe3, 0xb7, 0x11, 0x76, 0xdf,
	0x3f, 0x7a, 0xc1, 0x63, 0x73, 0xa9, 0x95, 0xe5, 0xca, 0x3a, 0x1b, 0xd5, 0xf1, 0x3f, 0xb9, 0xf8,
	0x0c, 0x00, 0x00, 0xff, 0xff, 0x62, 0x8d, 0xf9, 0xc5, 0x6e, 0x02, 0x00, 0x00,
}
