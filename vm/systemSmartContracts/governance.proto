syntax = "proto3";

package proto;

option go_package = "systemSmartContracts";
option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

enum VoteValueType {
    Yes     = 0;
    No      = 1;
    Veto    = 2;
    Abstain = 3;
}

message GeneralProposal {
    uint64 Nonce          = 1 [(gogoproto.jsontag) = "Nonce"];
    bytes  CommitHash     = 2 [(gogoproto.jsontag) = "CommitHash"];
    uint64 StartVoteNonce = 3 [(gogoproto.jsontag) = "StartVoteNonce"];
    uint64 EndVoteNonce   = 4 [(gogoproto.jsontag) = "EndVoteNonce"];
    bytes  Yes            = 5 [(gogoproto.jsontag) = "Yes", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
    bytes  No             = 6 [(gogoproto.jsontag) = "No", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
    bytes  Veto           = 7 [(gogoproto.jsontag) = "Veto", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
    bytes  Abstain        = 8 [(gogoproto.jsontag) = "Abstain", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
    bool   Passed         = 9 [(gogoproto.jsontag) = "Passed"];
    bool   Closed         = 10 [(gogoproto.jsontag) = "Closed"];
    bytes  IssuerAddress  = 11 [(gogoproto.jsontag) = "IssuerAddress"];
}

message GovernanceConfig {
    int64 NumNodes         = 1 [(gogoproto.jsontag) = "NumNodes"];
    int32 MinQuorum        = 2 [(gogoproto.jsontag) = "MinQuorum"];
    int32 MinPassThreshold = 3 [(gogoproto.jsontag) = "MinPassThreshold"];
    int32 MinVetoThreshold = 4 [(gogoproto.jsontag) = "MinVetoThreshold"];
    bytes ProposalFee      = 5 [(gogoproto.jsontag) = "ProposalFee", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
}

message GovernanceConfigV2 {
    bytes MinQuorum        = 1 [(gogoproto.jsontag) = "MinQuorum", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
    bytes MinPassThreshold = 2 [(gogoproto.jsontag) = "MinPassThreshold", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
    bytes MinVetoThreshold = 3 [(gogoproto.jsontag) = "MinVetoThreshold", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
    bytes ProposalFee      = 4 [(gogoproto.jsontag) = "ProposalFee", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
}

message OngoingVotedList {
    repeated uint64 ProposalNonces = 1 [(gogoproto.jsontag) = "ProposalNonces"];
}