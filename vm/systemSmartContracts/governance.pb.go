// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: governance.proto

package systemSmartContracts

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_multiversx_mx_chain_core_go_data "github.com/multiversx/mx-chain-core-go/data"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VoteValueType int32

const (
	Yes     VoteValueType = 0
	No      VoteValueType = 1
	Veto    VoteValueType = 2
	Abstain VoteValueType = 3
)

var VoteValueType_name = map[int32]string{
	0: "Yes",
	1: "No",
	2: "Veto",
	3: "Abstain",
}

var VoteValueType_value = map[string]int32{
	"Yes":     0,
	"No":      1,
	"Veto":    2,
	"Abstain": 3,
}

func (VoteValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e18a03da5266c714, []int{0}
}

type GeneralProposal struct {
	Nonce          uint64        `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce"`
	CommitHash     []byte        `protobuf:"bytes,2,opt,name=CommitHash,proto3" json:"CommitHash"`
	StartVoteNonce uint64        `protobuf:"varint,3,opt,name=StartVoteNonce,proto3" json:"StartVoteNonce"`
	EndVoteNonce   uint64        `protobuf:"varint,4,opt,name=EndVoteNonce,proto3" json:"EndVoteNonce"`
	Yes            *math_big.Int `protobuf:"bytes,5,opt,name=Yes,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"Yes"`
	No             *math_big.Int `protobuf:"bytes,6,opt,name=No,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"No"`
	Veto           *math_big.Int `protobuf:"bytes,7,opt,name=Veto,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"Veto"`
	Abstain        *math_big.Int `protobuf:"bytes,8,opt,name=Abstain,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"Abstain"`
	Passed         bool          `protobuf:"varint,9,opt,name=Passed,proto3" json:"Passed"`
	Closed         bool          `protobuf:"varint,10,opt,name=Closed,proto3" json:"Closed"`
	IssuerAddress  []byte        `protobuf:"bytes,11,opt,name=IssuerAddress,proto3" json:"IssuerAddress"`
	ProposalCost   *math_big.Int
}

func (m *GeneralProposal) Reset()      { *m = GeneralProposal{} }
func (*GeneralProposal) ProtoMessage() {}
func (*GeneralProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18a03da5266c714, []int{0}
}
func (m *GeneralProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeneralProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GeneralProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralProposal.Merge(m, src)
}
func (m *GeneralProposal) XXX_Size() int {
	return m.Size()
}
func (m *GeneralProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralProposal.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralProposal proto.InternalMessageInfo

func (m *GeneralProposal) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *GeneralProposal) GetCommitHash() []byte {
	if m != nil {
		return m.CommitHash
	}
	return nil
}

func (m *GeneralProposal) GetStartVoteNonce() uint64 {
	if m != nil {
		return m.StartVoteNonce
	}
	return 0
}

func (m *GeneralProposal) GetEndVoteNonce() uint64 {
	if m != nil {
		return m.EndVoteNonce
	}
	return 0
}

func (m *GeneralProposal) GetYes() *math_big.Int {
	if m != nil {
		return m.Yes
	}
	return nil
}

func (m *GeneralProposal) GetNo() *math_big.Int {
	if m != nil {
		return m.No
	}
	return nil
}

func (m *GeneralProposal) GetVeto() *math_big.Int {
	if m != nil {
		return m.Veto
	}
	return nil
}

func (m *GeneralProposal) GetAbstain() *math_big.Int {
	if m != nil {
		return m.Abstain
	}
	return nil
}

func (m *GeneralProposal) GetPassed() bool {
	if m != nil {
		return m.Passed
	}
	return false
}

func (m *GeneralProposal) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

func (m *GeneralProposal) GetIssuerAddress() []byte {
	if m != nil {
		return m.IssuerAddress
	}
	return nil
}

type GovernanceConfig struct {
	NumNodes         int64         `protobuf:"varint,1,opt,name=NumNodes,proto3" json:"NumNodes"`
	MinQuorum        int32         `protobuf:"varint,2,opt,name=MinQuorum,proto3" json:"MinQuorum"`
	MinPassThreshold int32         `protobuf:"varint,3,opt,name=MinPassThreshold,proto3" json:"MinPassThreshold"`
	MinVetoThreshold int32         `protobuf:"varint,4,opt,name=MinVetoThreshold,proto3" json:"MinVetoThreshold"`
	ProposalFee      *math_big.Int `protobuf:"bytes,5,opt,name=ProposalFee,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"ProposalFee"`
}

func (m *GovernanceConfig) Reset()      { *m = GovernanceConfig{} }
func (*GovernanceConfig) ProtoMessage() {}
func (*GovernanceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18a03da5266c714, []int{1}
}
func (m *GovernanceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovernanceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GovernanceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovernanceConfig.Merge(m, src)
}
func (m *GovernanceConfig) XXX_Size() int {
	return m.Size()
}
func (m *GovernanceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GovernanceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GovernanceConfig proto.InternalMessageInfo

func (m *GovernanceConfig) GetNumNodes() int64 {
	if m != nil {
		return m.NumNodes
	}
	return 0
}

func (m *GovernanceConfig) GetMinQuorum() int32 {
	if m != nil {
		return m.MinQuorum
	}
	return 0
}

func (m *GovernanceConfig) GetMinPassThreshold() int32 {
	if m != nil {
		return m.MinPassThreshold
	}
	return 0
}

func (m *GovernanceConfig) GetMinVetoThreshold() int32 {
	if m != nil {
		return m.MinVetoThreshold
	}
	return 0
}

func (m *GovernanceConfig) GetProposalFee() *math_big.Int {
	if m != nil {
		return m.ProposalFee
	}
	return nil
}

type DelegatedSCVoteInfo struct {
	TotalPower *math_big.Int `protobuf:"bytes,1,opt,name=MinQuorum,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"MinQuorum"`
	UsedPower  *math_big.Int `protobuf:"bytes,2,opt,name=MinPassThreshold,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"MinPassThreshold"`
}

type GovernanceConfigV2 struct {
	MinQuorum         *math_big.Int `protobuf:"bytes,1,opt,name=MinQuorum,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"MinQuorum"`
	MinPassThreshold  *math_big.Int `protobuf:"bytes,2,opt,name=MinPassThreshold,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"MinPassThreshold"`
	MinVetoThreshold  *math_big.Int `protobuf:"bytes,3,opt,name=MinVetoThreshold,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"MinVetoThreshold"`
	ProposalFee       *math_big.Int `protobuf:"bytes,4,opt,name=ProposalFee,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"ProposalFee"`
	LastProposalNonce uint64
}

func (m *GovernanceConfigV2) Reset()      { *m = GovernanceConfigV2{} }
func (*GovernanceConfigV2) ProtoMessage() {}
func (*GovernanceConfigV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18a03da5266c714, []int{2}
}
func (m *GovernanceConfigV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovernanceConfigV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GovernanceConfigV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovernanceConfigV2.Merge(m, src)
}
func (m *GovernanceConfigV2) XXX_Size() int {
	return m.Size()
}
func (m *GovernanceConfigV2) XXX_DiscardUnknown() {
	xxx_messageInfo_GovernanceConfigV2.DiscardUnknown(m)
}

var xxx_messageInfo_GovernanceConfigV2 proto.InternalMessageInfo

func (m *GovernanceConfigV2) GetMinQuorum() *math_big.Int {
	if m != nil {
		return m.MinQuorum
	}
	return nil
}

func (m *GovernanceConfigV2) GetMinPassThreshold() *math_big.Int {
	if m != nil {
		return m.MinPassThreshold
	}
	return nil
}

func (m *GovernanceConfigV2) GetMinVetoThreshold() *math_big.Int {
	if m != nil {
		return m.MinVetoThreshold
	}
	return nil
}

func (m *GovernanceConfigV2) GetProposalFee() *math_big.Int {
	if m != nil {
		return m.ProposalFee
	}
	return nil
}

type OngoingVotedList struct {
	ProposalNonces []uint64 `protobuf:"varint,1,rep,packed,name=ProposalNonces,proto3" json:"ProposalNonces"`
	Direct         []uint64
	Delegated      []uint64
}

func (m *OngoingVotedList) Reset()      { *m = OngoingVotedList{} }
func (*OngoingVotedList) ProtoMessage() {}
func (*OngoingVotedList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18a03da5266c714, []int{3}
}
func (m *OngoingVotedList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OngoingVotedList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OngoingVotedList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OngoingVotedList.Merge(m, src)
}
func (m *OngoingVotedList) XXX_Size() int {
	return m.Size()
}
func (m *OngoingVotedList) XXX_DiscardUnknown() {
	xxx_messageInfo_OngoingVotedList.DiscardUnknown(m)
}

var xxx_messageInfo_OngoingVotedList proto.InternalMessageInfo

func (m *OngoingVotedList) GetProposalNonces() []uint64 {
	if m != nil {
		return m.ProposalNonces
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.VoteValueType", VoteValueType_name, VoteValueType_value)
	proto.RegisterType((*GeneralProposal)(nil), "proto.GeneralProposal")
	proto.RegisterType((*GovernanceConfig)(nil), "proto.GovernanceConfig")
	proto.RegisterType((*GovernanceConfigV2)(nil), "proto.GovernanceConfigV2")
	proto.RegisterType((*OngoingVotedList)(nil), "proto.OngoingVotedList")
}

func init() { proto.RegisterFile("governance.proto", fileDescriptor_e18a03da5266c714) }

var fileDescriptor_e18a03da5266c714 = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xbd, 0x6e, 0xdb, 0x3a,
	0x14, 0x36, 0xfd, 0x17, 0x87, 0xf9, 0xb9, 0xba, 0x44, 0x06, 0xe1, 0x0e, 0x62, 0xe0, 0xc9, 0xb8,
	0x17, 0xb6, 0x81, 0xdb, 0x02, 0x01, 0xda, 0xa5, 0x91, 0x91, 0xa6, 0x01, 0x1a, 0x25, 0x51, 0x02,
	0xa3, 0x2d, 0x50, 0x14, 0xb4, 0xc5, 0xc8, 0x02, 0x2c, 0x32, 0x10, 0xa9, 0x20, 0xe9, 0xd4, 0xb5,
	0x5b, 0x9f, 0xa0, 0x73, 0xd1, 0x27, 0xe9, 0x98, 0x31, 0x93, 0xda, 0x28, 0x4b, 0xab, 0x29, 0x7d,
	0x83, 0x42, 0xf4, 0xaf, 0xec, 0xa0, 0x93, 0xd1, 0x89, 0x3c, 0xdf, 0xa1, 0xbe, 0xf3, 0x89, 0xe7,
	0xf0, 0x1c, 0xa8, 0xb9, 0xfc, 0x9c, 0x06, 0x8c, 0xb0, 0x2e, 0x6d, 0x9c, 0x05, 0x5c, 0x72, 0x54,
	0x52, 0xcb, 0x3f, 0x75, 0xd7, 0x93, 0xbd, 0xb0, 0xd3, 0xe8, 0x72, 0xbf, 0xe9, 0x72, 0x97, 0x37,
	0x15, 0xdc, 0x09, 0x4f, 0x95, 0xa5, 0x0c, 0xb5, 0x1b, 0x7c, 0x55, 0xfd, 0x59, 0x82, 0x7f, 0xed,
	0x52, 0x46, 0x03, 0xd2, 0x3f, 0x0c, 0xf8, 0x19, 0x17, 0xa4, 0x8f, 0x30, 0x2c, 0x59, 0x9c, 0x75,
	0xa9, 0x0e, 0x36, 0x41, 0xad, 0x68, 0x2e, 0x27, 0x11, 0x1e, 0x00, 0xf6, 0x60, 0x41, 0x0d, 0x08,
	0x5b, 0xdc, 0xf7, 0x3d, 0xf9, 0x8c, 0x88, 0x9e, 0x9e, 0xdf, 0x04, 0xb5, 0x55, 0x73, 0x3d, 0x89,
	0xf0, 0x14, 0x6a, 0x4f, 0xed, 0xd1, 0x23, 0xb8, 0x7e, 0x2c, 0x49, 0x20, 0xdb, 0x5c, 0xd2, 0x01,
	0x73, 0x41, 0x31, 0xa3, 0x24, 0xc2, 0x33, 0x1e, 0x7b, 0xc6, 0x46, 0x0f, 0xe1, 0xea, 0x0e, 0x73,
	0x26, 0x5f, 0x16, 0xd5, 0x97, 0x5a, 0x12, 0xe1, 0x0c, 0x6e, 0x67, 0x2c, 0xd4, 0x81, 0x85, 0x97,
	0x54, 0xe8, 0x25, 0x25, 0xed, 0x30, 0x89, 0x70, 0x6a, 0x7e, 0xfe, 0x8a, 0x77, 0x7c, 0x22, 0x7b,
	0xcd, 0x8e, 0xe7, 0x36, 0xf6, 0x98, 0x7c, 0x3c, 0x75, 0x55, 0x7e, 0xd8, 0x97, 0xde, 0x39, 0x0d,
	0xc4, 0x45, 0xd3, 0xbf, 0xa8, 0x77, 0x7b, 0xc4, 0x63, 0xf5, 0x2e, 0x0f, 0x68, 0xdd, 0xe5, 0x4d,
	0x87, 0x48, 0xd2, 0x30, 0x3d, 0x77, 0x8f, 0xc9, 0x16, 0x11, 0x92, 0x06, 0x76, 0xca, 0x86, 0xde,
	0xc0, 0xbc, 0xc5, 0xf5, 0xb2, 0x0a, 0x71, 0x90, 0x44, 0x38, 0x6f, 0xf1, 0xc5, 0x45, 0xc8, 0x5b,
	0x1c, 0x51, 0x58, 0x6c, 0x53, 0xc9, 0xf5, 0x25, 0x15, 0xe2, 0x28, 0x89, 0xb0, 0xb2, 0x17, 0x17,
	0x44, 0xd1, 0x21, 0x06, 0x97, 0xb6, 0x3b, 0x42, 0x12, 0x8f, 0xe9, 0x15, 0x15, 0xe9, 0x24, 0x89,
	0xf0, 0x08, 0x5a, 0x5c, 0xb0, 0x11, 0x23, 0xaa, 0xc2, 0xf2, 0x21, 0x11, 0x82, 0x3a, 0xfa, 0xf2,
	0x26, 0xa8, 0x55, 0x4c, 0x98, 0x44, 0x78, 0x88, 0xd8, 0xc3, 0x35, 0x3d, 0xd3, 0xea, 0xf3, 0xf4,
	0x0c, 0x9c, 0x9c, 0x19, 0x20, 0xf6, 0x70, 0x45, 0x5b, 0x70, 0x6d, 0x4f, 0x88, 0x90, 0x06, 0xdb,
	0x8e, 0x13, 0x50, 0x21, 0xf4, 0x15, 0xa5, 0xfe, 0xef, 0x24, 0xc2, 0x59, 0x87, 0x9d, 0x35, 0xab,
	0x3f, 0xf2, 0x50, 0xdb, 0x1d, 0x3f, 0x9f, 0x16, 0x67, 0xa7, 0x9e, 0x8b, 0x6a, 0xb0, 0x62, 0x85,
	0xbe, 0xc5, 0x1d, 0x2a, 0x54, 0xdd, 0x17, 0xcc, 0xd5, 0x24, 0xc2, 0x63, 0xcc, 0x1e, 0xef, 0xd0,
	0x7f, 0x70, 0x79, 0xdf, 0x63, 0x47, 0x21, 0x0f, 0x42, 0x5f, 0x15, 0x7f, 0xc9, 0x5c, 0x4b, 0x22,
	0x3c, 0x01, 0xed, 0xc9, 0x16, 0x3d, 0x81, 0xda, 0xbe, 0xc7, 0xd2, 0xbf, 0x3a, 0xe9, 0x05, 0x54,
	0xf4, 0x78, 0xdf, 0x51, 0xc5, 0x5f, 0x32, 0x37, 0x92, 0x08, 0xcf, 0xf9, 0xec, 0x39, 0x64, 0xc8,
	0x90, 0x66, 0x6a, 0xc2, 0x50, 0xcc, 0x30, 0x64, 0x7c, 0xf6, 0x1c, 0x82, 0xde, 0xc2, 0x95, 0xd1,
	0xdb, 0x7e, 0x4a, 0xe9, 0xf0, 0x51, 0xbc, 0x48, 0x22, 0x3c, 0x0d, 0x2f, 0x2e, 0xd1, 0xd3, 0xac,
	0xd5, 0x8f, 0x45, 0x88, 0x66, 0xef, 0xba, 0xfd, 0x3f, 0x92, 0xd3, 0x77, 0x08, 0x94, 0xa0, 0x76,
	0xe6, 0x0e, 0x17, 0x27, 0x67, 0x2a, 0x19, 0xef, 0xc1, 0x3d, 0xd9, 0x18, 0xb4, 0xaf, 0xd7, 0xf7,
	0x65, 0x63, 0x71, 0x22, 0xe6, 0xd3, 0x3a, 0xd4, 0x92, 0xcd, 0x6b, 0x21, 0xa3, 0x25, 0xe3, 0x5b,
	0xac, 0x96, 0xdf, 0x16, 0x48, 0xf1, 0x4f, 0x16, 0x88, 0x05, 0xb5, 0x03, 0xe6, 0x72, 0x8f, 0xb9,
	0x69, 0xf7, 0x76, 0x9e, 0x7b, 0x42, 0xa6, 0xf3, 0x62, 0x74, 0x44, 0xb5, 0xf3, 0xf4, 0x45, 0x16,
	0x46, 0xf3, 0x22, 0xeb, 0xb1, 0x67, 0xec, 0x7f, 0xb7, 0xe0, 0x5a, 0x4a, 0xd4, 0x26, 0xfd, 0x90,
	0x9e, 0x5c, 0x9e, 0x51, 0xb4, 0xa4, 0x46, 0x81, 0x96, 0x43, 0xe5, 0xb4, 0x5f, 0x6b, 0x00, 0x55,
	0x06, 0x6d, 0x55, 0xcb, 0xa3, 0x95, 0x71, 0xe7, 0xd3, 0x0a, 0xa6, 0x75, 0x75, 0x63, 0xe4, 0xae,
	0x6f, 0x8c, 0xdc, 0xdd, 0x8d, 0x01, 0xde, 0xc5, 0x06, 0xf8, 0x14, 0x1b, 0xe0, 0x4b, 0x6c, 0x80,
	0xab, 0xd8, 0x00, 0xd7, 0xb1, 0x01, 0xbe, 0xc5, 0x06, 0xf8, 0x1e, 0x1b, 0xb9, 0xbb, 0xd8, 0x00,
	0x1f, 0x6e, 0x8d, 0xdc, 0xd5, 0xad, 0x91, 0xbb, 0xbe, 0x35, 0x72, 0xaf, 0x36, 0xc4, 0xa5, 0x90,
	0xd4, 0x3f, 0xf6, 0x49, 0x20, 0x5b, 0x9c, 0xc9, 0x80, 0x74, 0xa5, 0xe8, 0x94, 0xd5, 0x80, 0x7d,
	0xf0, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x17, 0xda, 0x44, 0xaa, 0x07, 0x00, 0x00,
}

func (x VoteValueType) String() string {
	s, ok := VoteValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GeneralProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GeneralProposal)
	if !ok {
		that2, ok := that.(GeneralProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if !bytes.Equal(this.CommitHash, that1.CommitHash) {
		return false
	}
	if this.StartVoteNonce != that1.StartVoteNonce {
		return false
	}
	if this.EndVoteNonce != that1.EndVoteNonce {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.Yes, that1.Yes) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.No, that1.No) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.Veto, that1.Veto) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.Abstain, that1.Abstain) {
			return false
		}
	}
	if this.Passed != that1.Passed {
		return false
	}
	if this.Closed != that1.Closed {
		return false
	}
	if !bytes.Equal(this.IssuerAddress, that1.IssuerAddress) {
		return false
	}
	return true
}
func (this *GovernanceConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GovernanceConfig)
	if !ok {
		that2, ok := that.(GovernanceConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumNodes != that1.NumNodes {
		return false
	}
	if this.MinQuorum != that1.MinQuorum {
		return false
	}
	if this.MinPassThreshold != that1.MinPassThreshold {
		return false
	}
	if this.MinVetoThreshold != that1.MinVetoThreshold {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.ProposalFee, that1.ProposalFee) {
			return false
		}
	}
	return true
}
func (this *GovernanceConfigV2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GovernanceConfigV2)
	if !ok {
		that2, ok := that.(GovernanceConfigV2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.MinQuorum, that1.MinQuorum) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.MinPassThreshold, that1.MinPassThreshold) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.MinVetoThreshold, that1.MinVetoThreshold) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.ProposalFee, that1.ProposalFee) {
			return false
		}
	}
	return true
}
func (this *OngoingVotedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OngoingVotedList)
	if !ok {
		that2, ok := that.(OngoingVotedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ProposalNonces) != len(that1.ProposalNonces) {
		return false
	}
	for i := range this.ProposalNonces {
		if this.ProposalNonces[i] != that1.ProposalNonces[i] {
			return false
		}
	}
	return true
}
func (this *GeneralProposal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&systemSmartContracts.GeneralProposal{")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "CommitHash: "+fmt.Sprintf("%#v", this.CommitHash)+",\n")
	s = append(s, "StartVoteNonce: "+fmt.Sprintf("%#v", this.StartVoteNonce)+",\n")
	s = append(s, "EndVoteNonce: "+fmt.Sprintf("%#v", this.EndVoteNonce)+",\n")
	s = append(s, "Yes: "+fmt.Sprintf("%#v", this.Yes)+",\n")
	s = append(s, "No: "+fmt.Sprintf("%#v", this.No)+",\n")
	s = append(s, "Veto: "+fmt.Sprintf("%#v", this.Veto)+",\n")
	s = append(s, "Abstain: "+fmt.Sprintf("%#v", this.Abstain)+",\n")
	s = append(s, "Passed: "+fmt.Sprintf("%#v", this.Passed)+",\n")
	s = append(s, "Closed: "+fmt.Sprintf("%#v", this.Closed)+",\n")
	s = append(s, "IssuerAddress: "+fmt.Sprintf("%#v", this.IssuerAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GovernanceConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&systemSmartContracts.GovernanceConfig{")
	s = append(s, "NumNodes: "+fmt.Sprintf("%#v", this.NumNodes)+",\n")
	s = append(s, "MinQuorum: "+fmt.Sprintf("%#v", this.MinQuorum)+",\n")
	s = append(s, "MinPassThreshold: "+fmt.Sprintf("%#v", this.MinPassThreshold)+",\n")
	s = append(s, "MinVetoThreshold: "+fmt.Sprintf("%#v", this.MinVetoThreshold)+",\n")
	s = append(s, "ProposalFee: "+fmt.Sprintf("%#v", this.ProposalFee)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GovernanceConfigV2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&systemSmartContracts.GovernanceConfigV2{")
	s = append(s, "MinQuorum: "+fmt.Sprintf("%#v", this.MinQuorum)+",\n")
	s = append(s, "MinPassThreshold: "+fmt.Sprintf("%#v", this.MinPassThreshold)+",\n")
	s = append(s, "MinVetoThreshold: "+fmt.Sprintf("%#v", this.MinVetoThreshold)+",\n")
	s = append(s, "ProposalFee: "+fmt.Sprintf("%#v", this.ProposalFee)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OngoingVotedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&systemSmartContracts.OngoingVotedList{")
	s = append(s, "ProposalNonces: "+fmt.Sprintf("%#v", this.ProposalNonces)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGovernance(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GeneralProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeneralProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneralProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssuerAddress) > 0 {
		i -= len(m.IssuerAddress)
		copy(dAtA[i:], m.IssuerAddress)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.IssuerAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Closed {
		i--
		if m.Closed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Passed {
		i--
		if m.Passed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.Abstain)
		i -= size
		if _, err := __caster.MarshalTo(m.Abstain, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovernance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.Veto)
		i -= size
		if _, err := __caster.MarshalTo(m.Veto, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovernance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.No)
		i -= size
		if _, err := __caster.MarshalTo(m.No, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovernance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.Yes)
		i -= size
		if _, err := __caster.MarshalTo(m.Yes, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovernance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.EndVoteNonce != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.EndVoteNonce))
		i--
		dAtA[i] = 0x20
	}
	if m.StartVoteNonce != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.StartVoteNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CommitHash) > 0 {
		i -= len(m.CommitHash)
		copy(dAtA[i:], m.CommitHash)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.CommitHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GovernanceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovernanceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovernanceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.ProposalFee)
		i -= size
		if _, err := __caster.MarshalTo(m.ProposalFee, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovernance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MinVetoThreshold != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.MinVetoThreshold))
		i--
		dAtA[i] = 0x20
	}
	if m.MinPassThreshold != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.MinPassThreshold))
		i--
		dAtA[i] = 0x18
	}
	if m.MinQuorum != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.MinQuorum))
		i--
		dAtA[i] = 0x10
	}
	if m.NumNodes != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.NumNodes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GovernanceConfigV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovernanceConfigV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovernanceConfigV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.ProposalFee)
		i -= size
		if _, err := __caster.MarshalTo(m.ProposalFee, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovernance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.MinVetoThreshold)
		i -= size
		if _, err := __caster.MarshalTo(m.MinVetoThreshold, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovernance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.MinPassThreshold)
		i -= size
		if _, err := __caster.MarshalTo(m.MinPassThreshold, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovernance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.MinQuorum)
		i -= size
		if _, err := __caster.MarshalTo(m.MinQuorum, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovernance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OngoingVotedList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OngoingVotedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OngoingVotedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProposalNonces) > 0 {
		dAtA2 := make([]byte, len(m.ProposalNonces)*10)
		var j1 int
		for _, num := range m.ProposalNonces {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGovernance(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGovernance(dAtA []byte, offset int, v uint64) int {
	offset -= sovGovernance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GeneralProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovGovernance(uint64(m.Nonce))
	}
	l = len(m.CommitHash)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.StartVoteNonce != 0 {
		n += 1 + sovGovernance(uint64(m.StartVoteNonce))
	}
	if m.EndVoteNonce != 0 {
		n += 1 + sovGovernance(uint64(m.EndVoteNonce))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.Yes)
		n += 1 + l + sovGovernance(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.No)
		n += 1 + l + sovGovernance(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.Veto)
		n += 1 + l + sovGovernance(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.Abstain)
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.Passed {
		n += 2
	}
	if m.Closed {
		n += 2
	}
	l = len(m.IssuerAddress)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *GovernanceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumNodes != 0 {
		n += 1 + sovGovernance(uint64(m.NumNodes))
	}
	if m.MinQuorum != 0 {
		n += 1 + sovGovernance(uint64(m.MinQuorum))
	}
	if m.MinPassThreshold != 0 {
		n += 1 + sovGovernance(uint64(m.MinPassThreshold))
	}
	if m.MinVetoThreshold != 0 {
		n += 1 + sovGovernance(uint64(m.MinVetoThreshold))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.ProposalFee)
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *GovernanceConfigV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.MinQuorum)
		n += 1 + l + sovGovernance(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.MinPassThreshold)
		n += 1 + l + sovGovernance(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.MinVetoThreshold)
		n += 1 + l + sovGovernance(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.ProposalFee)
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *OngoingVotedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProposalNonces) > 0 {
		l = 0
		for _, e := range m.ProposalNonces {
			l += sovGovernance(uint64(e))
		}
		n += 1 + sovGovernance(uint64(l)) + l
	}
	return n
}

func sovGovernance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGovernance(x uint64) (n int) {
	return sovGovernance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GeneralProposal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GeneralProposal{`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`CommitHash:` + fmt.Sprintf("%v", this.CommitHash) + `,`,
		`StartVoteNonce:` + fmt.Sprintf("%v", this.StartVoteNonce) + `,`,
		`EndVoteNonce:` + fmt.Sprintf("%v", this.EndVoteNonce) + `,`,
		`Yes:` + fmt.Sprintf("%v", this.Yes) + `,`,
		`No:` + fmt.Sprintf("%v", this.No) + `,`,
		`Veto:` + fmt.Sprintf("%v", this.Veto) + `,`,
		`Abstain:` + fmt.Sprintf("%v", this.Abstain) + `,`,
		`Passed:` + fmt.Sprintf("%v", this.Passed) + `,`,
		`Closed:` + fmt.Sprintf("%v", this.Closed) + `,`,
		`IssuerAddress:` + fmt.Sprintf("%v", this.IssuerAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GovernanceConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GovernanceConfig{`,
		`NumNodes:` + fmt.Sprintf("%v", this.NumNodes) + `,`,
		`MinQuorum:` + fmt.Sprintf("%v", this.MinQuorum) + `,`,
		`MinPassThreshold:` + fmt.Sprintf("%v", this.MinPassThreshold) + `,`,
		`MinVetoThreshold:` + fmt.Sprintf("%v", this.MinVetoThreshold) + `,`,
		`ProposalFee:` + fmt.Sprintf("%v", this.ProposalFee) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GovernanceConfigV2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GovernanceConfigV2{`,
		`MinQuorum:` + fmt.Sprintf("%v", this.MinQuorum) + `,`,
		`MinPassThreshold:` + fmt.Sprintf("%v", this.MinPassThreshold) + `,`,
		`MinVetoThreshold:` + fmt.Sprintf("%v", this.MinVetoThreshold) + `,`,
		`ProposalFee:` + fmt.Sprintf("%v", this.ProposalFee) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OngoingVotedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OngoingVotedList{`,
		`ProposalNonces:` + fmt.Sprintf("%v", this.ProposalNonces) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGovernance(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GeneralProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeneralProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeneralProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitHash = append(m.CommitHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommitHash == nil {
				m.CommitHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartVoteNonce", wireType)
			}
			m.StartVoteNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartVoteNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndVoteNonce", wireType)
			}
			m.EndVoteNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndVoteNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Yes = tmp
				}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.No = tmp
				}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Veto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Veto = tmp
				}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abstain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Abstain = tmp
				}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Passed = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Closed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Closed = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAddress = append(m.IssuerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.IssuerAddress == nil {
				m.IssuerAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovernanceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovernanceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovernanceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumNodes", wireType)
			}
			m.NumNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumNodes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinQuorum", wireType)
			}
			m.MinQuorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinQuorum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPassThreshold", wireType)
			}
			m.MinPassThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPassThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVetoThreshold", wireType)
			}
			m.MinVetoThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVetoThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.ProposalFee = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovernanceConfigV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovernanceConfigV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovernanceConfigV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinQuorum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MinQuorum = tmp
				}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPassThreshold", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MinPassThreshold = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVetoThreshold", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.MinVetoThreshold = tmp
				}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.ProposalFee = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OngoingVotedList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OngoingVotedList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OngoingVotedList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGovernance
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ProposalNonces = append(m.ProposalNonces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGovernance
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGovernance
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGovernance
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ProposalNonces) == 0 {
					m.ProposalNonces = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGovernance
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ProposalNonces = append(m.ProposalNonces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalNonces", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGovernance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGovernance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGovernance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGovernance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGovernance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGovernance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGovernance = fmt.Errorf("proto: unexpected end of group")
)
